<?php

/**
 * @file
 * Enables queued messages for unavailable users.
 */

/**
 * Implementation of hook_help().
 */
function bot_commit_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Git'));
    case 'irc:features#git':
      return t('Send git commit messages that are being sent from a post-receive hook.');
  }
}

/**
 * Implementation of hook_menu().
 */
function bot_commit_menu() {
  $items = array();
  $items['admin/settings/bot/bot_commit'] = array(
    'title' => 'Configure bot commit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bot_commit_settings'),
    'access' => array('administer bot'),
  );
  return $items;
}

/**
 * Add the commit to the queue.
 */
function bot_commit_xmlrpc() {
  return array(
    'bot_commit.recordCommit',
    'bot_commit_record_commit',
    array(
      'string', // Commit id.
      'string', // Commit message.
    ),
    t('Forwarding a commit message to IRC'),
  );
}

/**
 * Receive and record a commit entry from the XML-RPC call.
 */
function bot_commit_record_commit($commit_id, $commit_message) {
  $commit = new StdClass;
  $commit->cid = $commit_id;
  $commit->commit_message = $commit_message;
  drupal_write_record('bot_commit_queue', $commit);
}

function bot_commit_irc_bot_cron_faster() {
  // Go through the commit messages and push them to irc.
  $result = db_query('SELECT cid, message, timestamp FROM {bot_commitqueue} ORDER BY timestamp DESC');
  while ($commit = db_fetch_object($result)) {
    bot_commit_publish_message($commit->cid, $commit->message);
    db_query('DELETE FROM {bot_commit_queue} WHERE cid = "%s"', $commit->cid);
  }
}

function bot_commit_publish_message($id, $message) {
  $to = '#test';
  bot_message($to, t('%commit => %message', array('%commmit' => $id, '%message' => $message)));
}
