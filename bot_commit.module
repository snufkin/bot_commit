<?php

/**
 * @file
 * Enables queued messages for unavailable users.
 */

/**
 * Implementation of hook_help().
 */
function bot_commit_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Git'));
    case 'irc:features#git':
      return t('Send git commit messages that are being sent from a post-receive hook.');
  }
}

/**
 * Implementation of hook_menu().
 */
function bot_commit_menu() {
  $items = array();
  $items['admin/settings/bot/bot_commit'] = array(
    'title'           => 'Configure bot commit',
    'description'     => 'Configure the commit messages the bot can push to IRC.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bot_commit_settings'),
    'access arguments' => array('administer bot'),
  );
  return $items;
}

function bot_commit_settings() {
  $form = array();

  // get a list of all joined channels, sans passwords.
  $joined_channels = preg_split('/\s*,\s*/', variable_get('bot_channels', '#test'));
  $channel_options = array(); // HOW MAY I HELP YOU!?
  foreach ($joined_channels as $k => $v) {
    $channel = preg_replace('/(.*) .*/', '\1', $v);
    $channel_options[$channel] = $channel;
  }

  $form['bot_commit_channel'] = array(
    '#title' => t('IRC channel'),
    '#description' => t('Select the channel to broadcast commits.'),
    '#type'          => 'select',
    '#size'          => 10,
    '#options' => $channel_options,
    '#default_value' => variable_get('bot_commit_channel', ''),
  );
  return system_settings_form($form);
}

/**
 * Add the commit to the queue.
 */
function bot_commit_xmlrpc() {
  return array(
    array(
      'bot_commit.recordCommit',
      'bot_commit_record_commit',
      array(
        'string', // Return the commit id.
        'string', // Repository name
        'string', // Commit id.
        'string', // Commit author.
        'string', // Commit message.
      ),
      t('Forwarding a commit message to IRC'),
    ),
  );
}

/**
 * Receive and record a commit entry from the XML-RPC call.
 */
function bot_commit_record_commit($repo, $id, $author, $message) {
  $commit = new StdClass;
  $commit->id = $id;
  $commit->message = $message;
  $commit->author = $author;
  $commit->repo = $repo;
  $commit->timestamp = time();
  drupal_write_record('bot_commit_queue', $commit);
}

/**
 * Implementation of hook_irc_bot_cron_fastest().
 */
function bot_commit_irc_bot_cron_fastest() {
  // Go through the commit messages and push them to irc.
  $result = db_query('SELECT qid, id, author, message, repo, timestamp FROM {bot_commit_queue} ORDER BY timestamp DESC');
  while ($commit = db_fetch_object($result)) {
    bot_commit_publish_message($commit);
    db_query('DELETE FROM {bot_commit_queue} WHERE qid = %d', $commit->qid);
  }
}

function bot_commit_publish_message($commit) {
  $channel = variable_get('bot_commit_channel', '');
  if ($channel) {
    bot_message($channel, t('[@repo] @commit by @author: @message', array('@commit' => $commit->id, '@author' => $commit->author, '@message' => $commit->message, '@repo' => $commit->repo)));
  }
}
